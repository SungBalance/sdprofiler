#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
#           This file was automatically generated from src/transformers/models/qwen3/modular_qwen3.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_qwen3.py file directly. One of our CI enforces this.
#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
# coding=utf-8
# Copyright 2025 The Qwen team, Alibaba Group and the HuggingFace Inc. team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import List, Optional, Tuple, Union

import torch
from torch import nn
import math
from .layers.activations import ACT2FN
from transformers.generation import GenerationMixin
from transformers.masking_utils import create_causal_mask, create_sliding_window_causal_mask

from transformers.modeling_outputs import BaseModelOutputWithPast, CausalLMOutputWithPast
from transformers.modeling_rope_utils import ROPE_INIT_FUNCTIONS, dynamic_rope_update
from transformers.modeling_utils import ALL_ATTENTION_FUNCTIONS, PreTrainedModel
from transformers.processing_utils import Unpack
from transformers.utils import auto_docstring, can_return_tuple
from transformers.utils import logging
from transformers.models.qwen3.configuration_qwen3 import Qwen3Config
import flashinfer
from .ops.append_kv import append_paged_kv_cache
from ..request import FlashInferMetadata
from ..utils.common import profile_nvtx
from transformers.integrations import use_kernel_forward_from_hub
from transformers.modeling_layers import (
    GradientCheckpointingLayer,
)
logger = logging.get_logger(__name__)

DEBUG=False

# @use_kernel_forward_from_hub("RMSNorm")
class Qwen3RMSNorm(nn.Module):
    def __init__(self, hidden_size, eps=1e-6):
        """
        Qwen3RMSNorm is equivalent to T5LayerNorm
        """
        super().__init__()
        self.weight = nn.Parameter(torch.ones(hidden_size))
        self.variance_epsilon = eps

    def legacy_forward(self, hidden_states):
        input_dtype = hidden_states.dtype
        hidden_states = hidden_states.to(torch.float32)
        variance = hidden_states.pow(2).mean(-1, keepdim=True)
        hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
        return self.weight * hidden_states.to(input_dtype)


    def forward(
            self, 
            hidden_states: torch.Tensor, 
            residual: Optional[torch.Tensor] = None):
        if residual is None:
            # out = torch.empty_like(hidden_states)
            # vllm_ops.rms_norm(out, hidden_states, self.weight, self.variance_epsilon)
            # print(f"RMSNorm forward, out: {out.shape}")
            # return out
            return self.legacy_forward(hidden_states)
            # layernorms.rmsnorm_forward(hidden_states, self.weight, self.variance_epsilon)
            # return hidden_states
        else:
            hidden_states = residual + hidden_states
            residual = hidden_states
            hidden_states = self.legacy_forward(hidden_states)
            # layernorms.add_fused_rmsnorm_forward(hidden_states, residual, self.weight, self.variance_epsilon)
            # print(f"RMSNorm forward, out: {hidden_states.shape}")
            return hidden_states, residual

    def extra_repr(self):
        return f"{tuple(self.weight.shape)}, eps={self.variance_epsilon}"

class Qwen3MLP(nn.Module):
    def __init__(self, config):
        super().__init__()
        self.config = config
        self.hidden_size = config.hidden_size
        self.intermediate_size = config.intermediate_size
        self.gate_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=False)
        self.up_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=False)
        self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size, bias=False)
        self.act_fn = ACT2FN[config.hidden_act]

        self.is_gate_up_combined = False

    def combine_gate_up(self):
        self.gate_up_proj = nn.Linear(self.hidden_size, self.intermediate_size + self.intermediate_size, bias=False, dtype=self.gate_proj.weight.dtype, device=self.gate_proj.weight.device)
        self.gate_up_proj.weight.data[:self.intermediate_size] = self.gate_proj.weight.data
        self.gate_up_proj.weight.data[self.intermediate_size:] = self.up_proj.weight.data

        del self.gate_proj
        del self.up_proj

        self.is_gate_up_combined = True

    @profile_nvtx("Qwen3MLP.forward")
    def forward(self, hidden_state):
        if not self.is_gate_up_combined:
            return self.down_proj(self.act_fn(self.gate_proj(hidden_state)) * self.up_proj(hidden_state))
        else:
            return self.down_proj(self.act_fn(self.gate_up_proj(hidden_state)))


def rotate_half(x):
    """Rotates half the hidden dims of the input."""
    x1 = x[..., : x.shape[-1] // 2]
    x2 = x[..., x.shape[-1] // 2 :]
    return torch.cat((-x2, x1), dim=-1)


def apply_rotary_pos_emb(q, k, cos, sin, position_ids=None, unsqueeze_dim=1):
    """Applies Rotary Position Embedding to the query and key tensors.

    Args:
        q (`torch.Tensor`): The query tensor.
        k (`torch.Tensor`): The key tensor.
        cos (`torch.Tensor`): The cosine part of the rotary embedding.
        sin (`torch.Tensor`): The sine part of the rotary embedding.
        position_ids (`torch.Tensor`, *optional*):
            Deprecated and unused.
        unsqueeze_dim (`int`, *optional*, defaults to 1):
            The 'unsqueeze_dim' argument specifies the dimension along which to unsqueeze cos[position_ids] and
            sin[position_ids] so that they can be properly broadcasted to the dimensions of q and k. For example, note
            that cos[position_ids] and sin[position_ids] have the shape [batch_size, seq_len, head_dim]. Then, if q and
            k have the shape [batch_size, heads, seq_len, head_dim], then setting unsqueeze_dim=1 makes
            cos[position_ids] and sin[position_ids] broadcastable to the shapes of q and k. Similarly, if q and k have
            the shape [batch_size, seq_len, heads, head_dim], then set unsqueeze_dim=2.
    Returns:
        `tuple(torch.Tensor)` comprising of the query and key tensors rotated using the Rotary Position Embedding.
    """
    cos = cos.unsqueeze(unsqueeze_dim)
    sin = sin.unsqueeze(unsqueeze_dim)
    q_embed = (q * cos) + (rotate_half(q) * sin)
    k_embed = (k * cos) + (rotate_half(k) * sin)
    return q_embed, k_embed


def repeat_kv(hidden_states: torch.Tensor, n_rep: int) -> torch.Tensor:
    """
    This is the equivalent of torch.repeat_interleave(x, dim=1, repeats=n_rep). The hidden states go from (batch,
    num_key_value_heads, seqlen, head_dim) to (batch, num_attention_heads, seqlen, head_dim)
    """
    batch, num_key_value_heads, slen, head_dim = hidden_states.shape
    if n_rep == 1:
        return hidden_states
    hidden_states = hidden_states[:, :, None, :, :].expand(batch, num_key_value_heads, n_rep, slen, head_dim)
    return hidden_states.reshape(batch, num_key_value_heads * n_rep, slen, head_dim)


def eager_attention_forward(
    module: nn.Module,
    query: torch.Tensor,
    key: torch.Tensor,
    value: torch.Tensor,
    attention_mask: Optional[torch.Tensor],
    scaling: float,
    dropout: float = 0.0,
):
    key_states = repeat_kv(key, module.num_key_value_groups)
    value_states = repeat_kv(value, module.num_key_value_groups)

    attn_weights = torch.matmul(query, key_states.transpose(2, 3)) * scaling
    if attention_mask is not None:
        causal_mask = attention_mask[:, :, :, : key_states.shape[-2]]
        attn_weights = attn_weights + causal_mask

    attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query.dtype)
    attn_weights = nn.functional.dropout(attn_weights, p=dropout, training=module.training)
    attn_output = torch.matmul(attn_weights, value_states)
    attn_output = attn_output.transpose(1, 2).contiguous()

    return attn_output, attn_weights


class Qwen3Attention(nn.Module):
    """
    Multi-headed attention from 'Attention Is All You Need' paper. Modified to use sliding window attention: Longformer
    and "Generating Long Sequences with Sparse Transformers".
    """

    def __init__(self, config: Qwen3Config, layer_idx: Optional[int] = None):
        super().__init__()
        self.config = config
        self.layer_idx = layer_idx
        if layer_idx is None:
            logger.warning_once(
                f"Instantiating {self.__class__.__name__} without passing `layer_idx` is not recommended and will "
                "to errors during the forward call, if caching is used. Please make sure to provide a `layer_idx` "
                "when creating this class."
            )

        self.hidden_size = config.hidden_size
        self.num_heads = config.num_attention_heads
        self.head_dim = getattr(config, "head_dim", config.hidden_size // config.num_attention_heads)
        self.num_key_value_heads = config.num_key_value_heads
        self.num_key_value_groups = self.num_heads // self.num_key_value_heads


        self.q_size = self.num_heads * self.head_dim
        self.kv_size = self.num_key_value_heads * self.head_dim


        self.max_position_embeddings = config.max_position_embeddings
        self.rope_theta = config.rope_theta
        self.is_causal = True
        self.attention_dropout = config.attention_dropout

        self.q_proj = nn.Linear(self.hidden_size, self.q_size, bias=config.attention_bias)
        self.k_proj = nn.Linear(self.hidden_size, self.kv_size, bias=config.attention_bias)
        self.v_proj = nn.Linear(self.hidden_size, self.kv_size, bias=config.attention_bias)
        self.o_proj = nn.Linear(self.q_size, self.hidden_size, bias=config.attention_bias)
        self.q_norm = Qwen3RMSNorm(self.head_dim, eps=config.rms_norm_eps)  # unlike olmo, only on the head dim!
        self.k_norm = Qwen3RMSNorm(self.head_dim, eps=config.rms_norm_eps)  # thus post q_norm does not need reshape
        self.rotary_emb = Qwen3RotaryEmbedding(config=self.config)

    @profile_nvtx("Qwen3Attention.forward")
    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[torch.Tensor] = None,
        cache_position: Optional[torch.LongTensor] = None,
        position_embeddings: Optional[Tuple[torch.Tensor, torch.Tensor]] = None,  # will become mandatory in v4.46
        output_attentions: bool = False,
    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:
        bsz, q_len, _ = hidden_states.size()


        query_states = self.q_proj(hidden_states)
        key_states = self.k_proj(hidden_states)
        value_states = self.v_proj(hidden_states)

        # query_states = query_states.view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)
        # key_states = key_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)
        # value_states = value_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)
        query_states = query_states.view(bsz, q_len, self.num_heads, self.head_dim)
        key_states = key_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim)

        query_states = self.q_norm(query_states)   # shape: (bsz, q_len, num_heads, head_dim)
        key_states = self.k_norm(key_states)       # shape: (bsz, q_len, num_kv_heads, head_dim)

        query_states = query_states.transpose(1, 2)
        key_states = key_states.transpose(1, 2)
        
        if position_embeddings is None:
            logger.warning_once(
                "The attention layers in this model are transitioning from computing the RoPE embeddings internally "
                "through `position_ids` (2D tensor with the indexes of the tokens), to using externally computed "
                "`position_embeddings` (Tuple of tensors, containing cos and sin). In v4.46 `position_ids` will be "
                "removed and `position_embeddings` will be mandatory."
            )
            cos, sin = self.rotary_emb(value_states, position_ids)
        else:
            cos, sin = position_embeddings
        
        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin)


        if past_key_value is not None:
            cache_kwargs = {"sin": sin, "cos": cos, "cache_position": cache_position}  # Specific to RoPE models
            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)


        attn_weights = torch.matmul(query_states, key_states.transpose(2, 3)) / math.sqrt(self.head_dim)
        if attention_mask is not None:  # no matter the length, we just slice it
            causal_mask = attention_mask[:, :, :, : key_states.shape[-2]]
            attn_weights = attn_weights + causal_mask

        # upcast attention to fp32
        attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query_states.dtype)
        attn_weights = nn.functional.dropout(attn_weights, p=self.attention_dropout, training=self.training)
        attn_output = torch.matmul(attn_weights, value_states)

        if attn_output.size() != (bsz, self.num_heads, q_len, self.head_dim):
            raise ValueError(
                f"`attn_output` should be of size {(bsz, self.num_heads, q_len, self.head_dim)}, but is"
                f" {attn_output.size()}"
            )

        attn_output = attn_output.transpose(1, 2).contiguous()
        attn_output = attn_output.reshape(bsz, q_len, self.hidden_size)

        attn_output = self.o_proj(attn_output)

        if not output_attentions:
            attn_weights = None

        return attn_output, attn_weights, past_key_value


class Qwen3FlashInferAttention(Qwen3Attention):
    """
    Qwen2 attention module using torch.nn.functional.scaled_dot_product_attention. This module inherits from
    `Qwen2Attention` as the weights of the module stays untouched. The only changes are on the forward pass to adapt to
    SDPA API.
    """
    def __init__(self, config: Qwen3Config, layer_idx: Optional[int] = None):
        super().__init__(config, layer_idx)
        self.prefill_wrapper = config.prefill_wrapper
        self.decode_wrapper = config.decode_wrapper

        self.is_qkv_combined = False

    
    def combine_qkv(self):

        hidden_size = self.q_proj.weight.data.shape[1]
        q_size = self.q_proj.weight.data.shape[0]
        kv_size = self.k_proj.weight.data.shape[0]

        self.qkv_proj = nn.Linear(hidden_size, q_size + kv_size + kv_size, bias=True, dtype=self.q_proj.weight.dtype, device=self.q_proj.weight.device)
        self.qkv_proj.weight.data[:q_size, :] = self.q_proj.weight.data
        self.qkv_proj.weight.data[q_size:q_size + kv_size, :] = self.k_proj.weight.data
        self.qkv_proj.weight.data[q_size + kv_size:, :] = self.v_proj.weight.data
        self.qkv_proj.bias.data[:q_size] = self.q_proj.bias.data
        self.qkv_proj.bias.data[q_size:q_size + kv_size] = self.k_proj.bias.data
        self.qkv_proj.bias.data[q_size + kv_size:] = self.v_proj.bias.data

        self.q_size = q_size
        self.kv_size = kv_size
        del self.q_proj
        del self.k_proj
        del self.v_proj

        self.is_qkv_combined = True

    def compute_qkv(self, hidden_states):
        num_token = hidden_states.shape[0]
        if not self.is_qkv_combined:
            query_states = self.q_proj(hidden_states)
            key_states = self.k_proj(hidden_states)
            value_states = self.v_proj(hidden_states)
        else:
            qkv_states = self.qkv_proj(hidden_states)
            query_states, key_states, value_states = qkv_states.split([self.q_size, self.kv_size, self.kv_size], dim=-1)

        query_states = query_states.view(num_token, self.num_heads, self.head_dim).contiguous()
        key_states = key_states.view(num_token, self.num_key_value_heads, self.head_dim).contiguous()
        value_states = value_states.view(num_token, self.num_key_value_heads, self.head_dim).contiguous()
        
        query_states = self.q_norm(query_states)
        key_states = self.k_norm(key_states)
        
        return query_states, key_states, value_states
    

    # Adapted from Qwen2Attention.forward
    @profile_nvtx("Qwen3FlashInferAttention.forward")
    def forward(
        self,
        hidden_states: torch.Tensor,
        position_embeddings: Optional[Tuple[torch.Tensor, torch.Tensor]] = None,  # will become mandatory in v4.46
        position_ids: Optional[torch.LongTensor] = None,
        flashinfer_metadata: FlashInferMetadata = None,
        past_key_value: List[torch.FloatTensor] = None,
        attention_mask: Optional[torch.Tensor] = None,
        ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:
        
        num_token = hidden_states.shape[0]
        query_states, key_states, value_states = self.compute_qkv(hidden_states)
        
        with torch.cuda.nvtx.range("Qwen3FlashInferAttention.forward.apply_rotary_pos_emb"):
            cos, sin = position_embeddings
            query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin)

        # query_states, key_states = flashinfer.rope.apply_rope(
        #     query_states,
        #     key_states,
        #     flashinfer_metadata.input_ids_indptr,
        #     position_ids, 
        # )

        causal_mask = attention_mask
        if attention_mask is not None:  # no matter the length, we just slice it
            causal_mask = attention_mask[:, :, :, : key_states.shape[-2]]
        
        if DEBUG:
            print(f"--------------- Qwen3FlashInferAttention.forward ---------------")
            print(f"  key_states: {key_states.shape}")
            print(f"  value_states: {value_states.shape}")
            print(f"  batch_indices: {flashinfer_metadata.batch_indices.shape}")
            print(f"  positions: {flashinfer_metadata.positions.shape}")
            print(f"  paged_kv_indices: {flashinfer_metadata.paged_kv_indices.shape}")
            print(f"  paged_kv_indptr: {flashinfer_metadata.paged_kv_indptr.shape}")
            print(f"  paged_kv_last_page_len: {flashinfer_metadata.paged_kv_last_page_len.shape}")
            print(f"  past_key_value: {past_key_value.shape}")
            print(f"----------------------------------------------------------------")

        # print(f"--------------- Qwen2FlashInferAttention.forward ---------------")
        # print(f"  key_states: {key_states.shape}")
        # print(f"  value_states: {value_states.shape}")
        # print(f"  batch_indices: {flashinfer_metadata.batch_indices.shape}")
        # print(f"  positions: {flashinfer_metadata.positions.shape}")
        # print(f"  paged_kv_indices: {flashinfer_metadata.paged_kv_indices.shape}")
        # print(f"  paged_kv_indptr: {flashinfer_metadata.paged_kv_indptr.shape}")
        # print(f"  paged_kv_last_page_len: {flashinfer_metadata.paged_kv_last_page_len.shape}")
        # print(f"  past_key_value: {past_key_value.shape}")
        # print(f"----------------------------------------------------------------")
        
        
        # flashinfer.page.append_paged_kv_cache(
        #     append_key=key_states,
        #     append_value=value_states,
        #     batch_indices=flashinfer_metadata.batch_indices,
        #     positions=flashinfer_metadata.positions,
        #     paged_kv_cache=past_key_value,
        #     kv_indices=flashinfer_metadata.paged_kv_indices,
        #     kv_indptr=flashinfer_metadata.paged_kv_indptr,
        #     kv_last_page_len=flashinfer_metadata.paged_kv_last_page_len,
        #     kv_layout="NHD"
        # )

        # append_paged_kv_cache(
        #     append_key=key_states,
        #     append_value=value_states,
        #     batch_indices=flashinfer_metadata.batch_indices,
        #     positions=flashinfer_metadata.positions,
        #     paged_kv_cache=past_key_value,
        #     kv_indices=flashinfer_metadata.paged_kv_indices,
        #     kv_indptr=flashinfer_metadata.paged_kv_indptr,
        #     kv_last_page_len=flashinfer_metadata.paged_kv_last_page_len,
        #     num_all_tokens=flashinfer_metadata.num_all_tokens
        # )

        # import pdb; pdb.set_trace()
        append_paged_kv_cache(
            append_key=key_states,
            append_value=value_states,
            batch_indices=flashinfer_metadata.batch_indices,
            positions=flashinfer_metadata.positions,
            paged_kv_cache=past_key_value,
            kv_indices=self.config.prefill_wrapper._paged_kv_indices_buf,
            kv_indptr=self.config.prefill_wrapper._paged_kv_indptr_buf,
            kv_last_page_len=self.config.prefill_wrapper._paged_kv_last_page_len_buf,
            num_all_tokens=flashinfer_metadata.num_all_tokens_tensor
        )
        
        attn_output = self.config.prefill_wrapper.run(
            query_states,
            past_key_value,
        )

        attn_output = attn_output.reshape(num_token, -1)
        attn_output = self.o_proj(attn_output)
        return attn_output, None, None


class Qwen3DecoderLayer(nn.Module):
    def __init__(self, config: Qwen3Config, layer_idx: int):
        super().__init__()
        self.hidden_size = config.hidden_size

        self.self_attn = Qwen3FlashInferAttention(config=config, layer_idx=layer_idx)

        self.mlp = Qwen3MLP(config)
        self.input_layernorm = Qwen3RMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        self.post_attention_layernorm = Qwen3RMSNorm(config.hidden_size, eps=config.rms_norm_eps)

    def forward(
        self,
        hidden_states: torch.Tensor,
        flashinfer_metadata: FlashInferMetadata,
        residual: Optional[torch.Tensor] = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[Tuple[torch.Tensor]] = None,
        position_embeddings: Optional[Tuple[torch.Tensor, torch.Tensor]] = None,  # will become mandatory in v4.46
        **kwargs,
    ) -> Tuple[torch.Tensor, torch.Tensor]:


        # Self Attention
        if residual is None:
            residual = hidden_states
            hidden_states = self.input_layernorm(hidden_states)
        else:
            hidden_states, residual = self.input_layernorm(hidden_states, residual)
        

        hidden_states, _, _ = self.self_attn(
            hidden_states=hidden_states,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_value=past_key_value,
            position_embeddings=position_embeddings,
            flashinfer_metadata=flashinfer_metadata,
        )

        # # Fully Connected
        hidden_states, residual = self.post_attention_layernorm(hidden_states, residual)
        hidden_states = self.mlp(hidden_states)
        return hidden_states, residual


@auto_docstring
class Qwen3PreTrainedModel(PreTrainedModel):
    config: Qwen3Config
    base_model_prefix = "model"
    supports_gradient_checkpointing = True
    _no_split_modules = ["Qwen3DecoderLayer"]
    _skip_keys_device_placement = ["past_key_values"]
    _supports_flash_attn = True
    _supports_sdpa = True
    _supports_flex_attn = True

    _can_compile_fullgraph = True
    _supports_attention_backend = True
    _can_record_outputs = {
        "hidden_states": Qwen3DecoderLayer,
        "attentions": Qwen3Attention,
    }
    packed_modules_mapping = {
        "qkv_proj": [
            "q_proj",
            "k_proj",
            "v_proj",
        ],
        # "gate_up_proj": [
        #     "gate_proj",
        #     "up_proj",
        # ],
    }


class Qwen3RotaryEmbedding(nn.Module):
    def __init__(
        self,
        dim=None,
        max_position_embeddings=2048,
        base=10000,
        device=None,
        scaling_factor=1.0,
        rope_type="default",
        config: Optional[Qwen3Config] = None,
    ):
        super().__init__()
        # TODO (joao): remove the `if` below, only used for BC
        self.rope_kwargs = {}
        if config is None:
            logger.warning_once(
                "`Qwen2RotaryEmbedding` can now be fully parameterized by passing the model config through the "
                "`config` argument. All other arguments will be removed in v4.46"
            )
            self.rope_kwargs = {
                "rope_type": rope_type,
                "factor": scaling_factor,
                "dim": dim,
                "base": base,
                "max_position_embeddings": max_position_embeddings,
            }
            self.rope_type = rope_type
            self.max_seq_len_cached = max_position_embeddings
            self.original_max_seq_len = max_position_embeddings
        else:
            # BC: "rope_type" was originally "type"
            if config.rope_scaling is not None:
                self.rope_type = config.rope_scaling.get("rope_type", config.rope_scaling.get("type"))
            else:
                self.rope_type = "default"
            self.max_seq_len_cached = config.max_position_embeddings
            self.original_max_seq_len = config.max_position_embeddings

        self.config = config
        self.rope_init_fn = ROPE_INIT_FUNCTIONS[self.rope_type]

        inv_freq, self.attention_scaling = self.rope_init_fn(self.config, device, **self.rope_kwargs)
        self.register_buffer("inv_freq", inv_freq, persistent=False)
        self.original_inv_freq = self.inv_freq

    def _dynamic_frequency_update(self, position_ids, device):
        """
        dynamic RoPE layers should recompute `inv_freq` in the following situations:
        1 - growing beyond the cached sequence length (allow scaling)
        2 - the current sequence length is in the original scale (avoid losing precision with small sequences)
        """
        seq_len = torch.max(position_ids) + 1
        if seq_len > self.max_seq_len_cached:  # growth
            inv_freq, self.attention_scaling = self.rope_init_fn(
                self.config, device, seq_len=seq_len, **self.rope_kwargs
            )
            self.register_buffer("inv_freq", inv_freq, persistent=False)  # TODO joao: may break with compilation
            self.max_seq_len_cached = seq_len

        if seq_len < self.original_max_seq_len and self.max_seq_len_cached > self.original_max_seq_len:  # reset
            self.register_buffer("inv_freq", self.original_inv_freq, persistent=False)
            self.max_seq_len_cached = self.original_max_seq_len


    @profile_nvtx("Qwen3RotaryEmbedding")
    @torch.no_grad()
    def forward(self, x, position_ids):
        if "dynamic" in self.rope_type:
            self._dynamic_frequency_update(position_ids, device=x.device)

        # Core RoPE block
        inv_freq_expanded = self.inv_freq[:, None].float().expand(-1, 1)
        position_ids_expanded = position_ids[None, :].float()
        # Force float32 (see https://github.com/huggingface/transformers/pull/29285)
        device_type = x.device.type
        device_type = device_type if isinstance(device_type, str) and device_type != "mps" else "cpu"
        with torch.autocast(device_type=device_type, enabled=False):
            freqs = (inv_freq_expanded.float() @ position_ids_expanded.float()).transpose(0, 1)
            emb = torch.cat((freqs, freqs), dim=-1)
            cos = emb.cos()
            sin = emb.sin()

        # Advanced RoPE types (e.g. yarn) apply a post-processing scaling factor, equivalent to scaling attention
        cos = cos * self.attention_scaling
        sin = sin * self.attention_scaling

        return cos.to(dtype=x.dtype), sin.to(dtype=x.dtype)


@auto_docstring
class Qwen3Model(Qwen3PreTrainedModel):
    def __init__(self, config: Qwen3Config):
        super().__init__(config)
        self.padding_idx = config.pad_token_id
        self.vocab_size = config.vocab_size

        setattr(config, "prefill_wrapper", None)
        setattr(config, "decode_wrapper", None)
        self.q_data_type = config.torch_dtype
        self.kv_data_type = config.past_key_values_dtype
        # mlsys

        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)
        self.layers = nn.ModuleList(
            [Qwen3DecoderLayer(config, layer_idx) for layer_idx in range(config.num_hidden_layers)]
        )
        self._attn_implementation = config._attn_implementation
        self.norm = Qwen3RMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        self.rotary_emb = Qwen3RotaryEmbedding(config=config)

        self.post_init()
        
        self.aux_hidden_state_layers = (2, config.num_hidden_layers // 2, config.num_hidden_layers - 3)

    def forward(
        self,
        input_ids: Optional[torch.LongTensor] = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        flashinfer_metadata: FlashInferMetadata = None,
        past_key_values: Optional[torch.Tensor] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
    ):
        if (input_ids is None) ^ (inputs_embeds is not None):
            raise ValueError("You must specify exactly one of input_ids or inputs_embeds")

        if inputs_embeds is None:
            inputs_embeds = self.embed_tokens(input_ids)

        hidden_states = inputs_embeds

        # create position embeddings to be shared across the decoder layers
        position_embeddings = self.rotary_emb(hidden_states, position_ids)
        
        residual = None
        aux_hidden_states = []
        for decoder_layer_idx, decoder_layer in enumerate(self.layers):
            if decoder_layer_idx in self.aux_hidden_state_layers:
                aux_hidden_states.append(hidden_states + residual)
            hidden_states, residual = decoder_layer(
                hidden_states=hidden_states,
                flashinfer_metadata=flashinfer_metadata,
                residual=residual,
                past_key_value=past_key_values[decoder_layer_idx],
                position_ids=position_ids,
                position_embeddings=position_embeddings
            )

        hidden_states, _ = self.norm(hidden_states, residual)
        return (hidden_states, aux_hidden_states)


@auto_docstring
class Eagle3Qwen3ForCausalLM(Qwen3PreTrainedModel, GenerationMixin):
    _tied_weights_keys = ["lm_head.weight"]
    _tp_plan = {"lm_head": "colwise_rep"}
    _pp_plan = {"lm_head": (["hidden_states"], ["logits"])}

    def __init__(self, config):
        super().__init__(config)
        self.model = Qwen3Model(config)
        self.vocab_size = config.vocab_size
        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False)

        # Initialize weights and apply final processing
        self.post_init()

    def set_decoder(self, decoder):
        self.model = decoder

    def get_decoder(self):
        return self.model

    @can_return_tuple
    @auto_docstring
    def forward(
        self,
        input_ids: torch.LongTensor = None,
        flashinfer_metadata: FlashInferMetadata = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[List[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        **kwargs,
    ):
        # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)

        outputs = self.model(
            input_ids=input_ids,
            flashinfer_metadata=flashinfer_metadata,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_values=past_key_values,
            inputs_embeds=inputs_embeds,
        )

        return outputs

    def get_logits(self, hidden_states):
        logits = self.lm_head(hidden_states).float()
        return logits


__all__ = [
    "Eagle3Qwen3ForCausalLM",
]